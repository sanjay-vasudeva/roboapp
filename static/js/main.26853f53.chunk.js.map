{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardArray","cardComponent","robot","map","user","i","key","Scroll","props","style","overflowY","height","border","children","searchBox","searchChange","type","onChange","placeholder","ErrorBoundary","state","hasError","error","info","console","log","componentStack","this","Component","App","OnSearchChange","event","setState","searchField","target","value","robots","fetch","then","response","json","users","filteredrobots","filter","toLowerCase","includes","length","SearchBox","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCNSC,EAVF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAOC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAC1B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAKJ,EAAMK,IAAG,+BAA0BH,EAA1B,mBACnB,4BAAKF,GACL,2BAAIC,KCGGK,EAPG,SAAC,GAAa,IACxBC,EADuB,EAAXC,MACUC,KAAI,SAACC,EAAKC,GAAN,OAC3B,kBAAC,EAAD,CAAMC,IAAKF,EAAKR,GAAIA,GAAIQ,EAAKR,GAAIF,KAAMU,EAAKV,KAAMC,MAAOS,EAAKT,WAEnE,OAAO,6BAAMM,ICGAM,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,QAASC,OAAQ,sBACrDJ,EAAMK,WCUJC,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACpB,OACE,yBAAKlB,UAAU,OACb,2BACEA,UAAU,mCACVmB,KAAM,OACNC,SAAYF,EACZG,YAAY,uBCqBHC,E,kDA3BX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,UAAW,GAHD,E,8DAWAC,EAAMC,GACpBC,QAAQC,IAAI,iBAAiBF,EAAKG,kB,+BAKlC,OAAIC,KAAKP,MAAMC,SAEP,wBAAIxB,UAAU,MAAd,gCAED8B,KAAKnB,MAAMK,Y,gDAdUS,GAC5B,MAAO,CAACD,UAAW,O,GATCO,aCsDbC,G,wDA/CX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAhB3C,EAAKf,MAAQ,CACTgB,OAAS,GACTH,YAAc,IAElBT,QAAQC,IAAI,eANH,E,gEASO,IAAD,OACfD,QAAQC,IAAI,qBACZY,MAAM,8CACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACI,OAASK,S,+BAQjC,IAAD,OACEC,EAAiBf,KAAKP,MAAMgB,OAAOO,QAAO,SAACzC,GAC/C,OAAOA,EAAMR,KACVkD,cACAC,SAAS,EAAKzB,MAAMa,YAAYW,kBAGrC,OADApB,QAAQC,IAAI,UACoB,IAA7BE,KAAKP,MAAMgB,OAAOU,OACV,wBAAIjD,UAAY,eAAhB,WAIL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,YAAd,eACA,kBAACkD,EAAD,CAAWhC,aAAcY,KAAKG,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,MAAOwC,W,GAvCnBd,cCDlBoB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLE,QAAQF,MAAMA,EAAMoC,a","file":"static/js/main.26853f53.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name , email , id}) => {\r\n    return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt={name} src={`https://robohash.org/${id}?size=200x200`} />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({robot}) => {\r\n  const cardComponent = robot.map((user,i) => \r\n       <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n  )\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardArray;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY: 'scroll',height: '500px', border: '0.5px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst searchBox = ({searchChange}) =>{\r\nreturn (\r\n  <div className=\"pa2\">\r\n    <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type= 'Text'\r\n      onChange = {searchChange}\r\n      placeholder=\"Enter Robot name\"\r\n    />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default searchBox;","import React ,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n    \r\n    static getDerivedStateFromError(error){\r\n        return {hasError : true};\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        console.log('Error custom: ',info.componentStack);\r\n        // this.setState({hasError : true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1 className=\"tc\">Oops...Something went wrong!</h1>);\r\n        } else {\r\n        return(this.props.children);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n// import {robot} from './Robots';\r\nimport Cardlist from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchField : ''\r\n        }\r\n        console.log('constructor');\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        fetch('https://jsonplaceholder.typicode.com/users').\r\n        then(response => response.json()).\r\n        then(users => this.setState({robots : users}));\r\n        \r\n    }\r\n\r\n    OnSearchChange = (event) =>{\r\n        this.setState({ searchField : event.target.value })\r\n    }\r\n\r\n    render(){\r\n        const filteredrobots = this.state.robots.filter((robot) => {\r\n          return robot.name\r\n            .toLowerCase()\r\n            .includes(this.state.searchField.toLowerCase());\r\n        });\r\n        console.log('render');\r\n        if(this.state.robots.length === 0){\r\n            return <h1 className = \"tc f1 title\">Loading</h1>\r\n        }\r\n        else{\r\n            return (\r\n              <div className=\"tc\">\r\n                <h1 className=\"f1 title\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.OnSearchChange} />\r\n                <Scroll>\r\n                  <ErrorBoundary>\r\n                    <Cardlist robot={filteredrobots} />\r\n                  </ErrorBoundary>\r\n                </Scroll>\r\n              </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}